// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(oneof="entity::Item", tags="1, 2, 10, 11, 12, 20")]
    pub item: ::core::option::Option<entity::Item>,
}
/// Nested message and enum types in `Entity`.
pub mod entity {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Item {
        #[prost(message, tag="1")]
        Payment(super::Payment),
        #[prost(message, tag="2")]
        MapCreate(super::MapCreate),
        #[prost(message, tag="10")]
        Transfers(super::Transfer),
        #[prost(message, tag="11")]
        Mints(super::Mint),
        #[prost(message, tag="12")]
        Burns(super::Burn),
        #[prost(message, tag="20")]
        InitializedAccount(super::InitializedAccount),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(string, tag="1")]
    pub hash: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub entities: ::prost::alloc::vec::Vec<Entity>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(uint64, tag="1")]
    pub block_number: u64,
    #[prost(uint64, tag="2")]
    pub block_hash: u64,
    #[prost(message, repeated, tag="3")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Payment {
    #[prost(message, optional, tag="1")]
    pub mint: ::core::option::Option<Mint>,
    #[prost(enumeration="PaymentType", tag="2")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapCreate {
    #[prost(message, optional, tag="1")]
    pub burn: ::core::option::Option<Burn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    #[prost(string, tag="2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub to: ::prost::alloc::string::String,
    #[prost(double, tag="4")]
    pub amount: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mint {
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    #[prost(string, tag="2")]
    pub to: ::prost::alloc::string::String,
    #[prost(double, tag="3")]
    pub amount: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Burn {
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    #[prost(string, tag="2")]
    pub from: ::prost::alloc::string::String,
    #[prost(double, tag="3")]
    pub amount: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializedAccount {
    #[prost(string, tag="1")]
    pub account: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub mint: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PaymentType {
    Unset = 0,
    Mint = 1,
    RegularDriver = 2,
    NoSplit = 3,
    AiTrainer = 4,
    Operational = 5,
    Reward = 6,
    FleetManager = 7,
    FleetDriver = 8,
    MapConsumption = 9,
}
impl PaymentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PaymentType::Unset => "UNSET",
            PaymentType::Mint => "MINT",
            PaymentType::RegularDriver => "REGULAR_DRIVER",
            PaymentType::NoSplit => "NO_SPLIT",
            PaymentType::AiTrainer => "AI_TRAINER",
            PaymentType::Operational => "OPERATIONAL",
            PaymentType::Reward => "REWARD",
            PaymentType::FleetManager => "FLEET_MANAGER",
            PaymentType::FleetDriver => "FLEET_DRIVER",
            PaymentType::MapConsumption => "MAP_CONSUMPTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSET" => Some(Self::Unset),
            "MINT" => Some(Self::Mint),
            "REGULAR_DRIVER" => Some(Self::RegularDriver),
            "NO_SPLIT" => Some(Self::NoSplit),
            "AI_TRAINER" => Some(Self::AiTrainer),
            "OPERATIONAL" => Some(Self::Operational),
            "REWARD" => Some(Self::Reward),
            "FLEET_MANAGER" => Some(Self::FleetManager),
            "FLEET_DRIVER" => Some(Self::FleetDriver),
            "MAP_CONSUMPTION" => Some(Self::MapConsumption),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
